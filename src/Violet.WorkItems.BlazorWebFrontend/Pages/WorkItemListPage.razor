@page "/wi/{projectCode}"
@inject WorkItemService WorkItemService
@inject WorkItemDescriptorService WorkItemDescriptorService
@inject NavigationManager NavigationManager
@using WorkItems.Types;

@if (List is not null)
{
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.body1">@ProjectCode <text>- All Work Items</text></MudText>
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Filled.Add" Color="Color.Inherit">
            @foreach (var type in Types)
            {
                <MudMenuItem @onclick="(() => NavigateToNewWorkItem(type.Name))">@type.DisplayName</MudMenuItem>

            }
        </MudMenu>
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <MudTable Items="@List" T="WorkItem" OnRowClick="@OnRowClickCommand" Hover="true" SelectOnRowClick="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Title</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Type">@context.WorkItemType</MudTd>
            <MudTd DataLabel="Title">@context["Title"].Value</MudTd>
        </RowTemplate>
    </MudTable>
}
@code {
    [Parameter]
    public string ProjectCode { get; set; }
    public IEnumerable<WorkItem> List = null;
    public IEnumerable<WorkItemType> Types = null;

    protected override async Task OnParametersSetAsync()
    {
        List = await WorkItemService.GetAllWorkItems(ProjectCode);
        Types = (await WorkItemDescriptorService.GetWorkItemTypes(ProjectCode)).Types;
    }

    public void NavigateToNewWorkItem(string type)
    => NavigationManager.NavigateTo($"/wi/{ProjectCode}/new?type={type}");

    public void OnRowClickCommand(TableRowClickEventArgs<WorkItem> e)
    => NavigateToWorkItem(e.Item);

    public void NavigateToWorkItem(WorkItem workItem)
    {
        NavigationManager.NavigateTo($"/wi/{workItem.ProjectCode}/{workItem.Id}");
    }
}
