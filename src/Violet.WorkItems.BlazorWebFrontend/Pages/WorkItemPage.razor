@page "/wi/{ProjectCode}/{WorkItemId}"
@inject HttpClient Http
@inject WorkItemService WorkItemService
@inject WorkItemDescriptorService WorkItemDescriptorService
@inject NavigationManager NavigationManager
@using Violet.WorkItems.Service.Messages;
@using Violet.WorkItems.Types
@using Violet.WorkItems.BlazorWebFrontend.Shared.Widgets

@if (WorkItemDescriptor is not null)
{
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Inherit" Edge="Edge.Start" @onclick="OnBack"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" Edge="Edge.End" @onclick="OnSave"></MudIconButton>
        <MudText Typo="Typo.body1">
            @WorkItemId
            @if (WorkItem.TryGetProperty("Title", out var titleProperty))
            {
                <span> - @titleProperty.Value</span>
            }
            <text>@ProjectCode - @WorkItem.WorkItemType</text>
        </MudText>
        <MudSpacer />
        @foreach (var command in WorkItemDescriptor.Commands)
        {
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DoubleArrow" Color="Color.Inherit" @onclick="@(e => OnCommand(command))">@command.Label</MudButton>
        }
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <h3 class="m-4">Properties</h3>
    @foreach (var property in WorkItemDescriptor.Properties)
    {
        <PropertyWidget WorkItem="@WorkItem" WorkItemDescriptor="@WorkItemDescriptor" PropertyDescriptor="@property" WorkItemChanged="@(e => OnPropertyUpdate(e))" />
    }

    <h3 class="m-4">History</h3>
    @foreach (var logEntry in WorkItem.Log.OrderByDescending(l => l.Date))
    {
        <div class="mx-4 my-1">
            <strong>@logEntry.Date.ToString("s")</strong> by @logEntry.User<br />
            <em>@logEntry.Comment</em>

            @foreach (var change in logEntry.Changes)
            {
                <div>
                    &gt; @change.Name : @change.OldValue -> @change.NewValue
                </div>
            }
        </div>
    }

}

@code {
    private string workItemType = "Bug";

    [Parameter]
    public string ProjectCode { get; set; }
    [Parameter]
    public string WorkItemId { get; set; }

    public WorkItemDescriptorApiResponse WorkItemDescriptor;
    public WorkItem WorkItem { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemType(ProjectCode, workItemType);

            WorkItem = await WorkItemService.GetTemplateAsync(ProjectCode, workItemType);
        }
        else
        {
            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);

            WorkItem = await WorkItemService.GetWorkItemAsync(ProjectCode, WorkItemId);
        }
    }

    public async Task OnPropertyUpdate(WorkItem workItem)
    {
        WorkItem = workItem;
    }

    public async Task OnCommand(CommandDescriptor command)
    {
        WorkItem = await WorkItemService.ExecuteCommandAsync(ProjectCode, WorkItem.Id, command.Name);

        WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
    }

    public async Task OnSave()
    {
        if (WorkItemId.ToLowerInvariant() == "new")
        {
            var result = await WorkItemService.CreateWorkItemAsync(ProjectCode, WorkItem.WorkItemType,
            WorkItem.Properties);

            NavigationManager.NavigateTo($"/wi/{result.ProjectCode}/{result.Id}");
        }
        else
        {
            var result = await WorkItemService.UpdateWorkItemAsync(WorkItem, "Awesome");

            WorkItem = result;
            WorkItemId = result.Id;

            WorkItemDescriptor = await WorkItemDescriptorService.GetWorkItemDescriptorByWorkItemId(ProjectCode, WorkItemId);
        }
    }

    public async Task OnBack()
    {
        NavigationManager.NavigateTo($"/wi/{ProjectCode}");
    }
}